vars = {"wf": {"id": "appendchain", "callbackUrl": "https://webhook.site/bfc96eec-ccf5-41fb-b807-57da6faaf12d", "states": {"A": {"id": "A", "function": {"ref": "http_invoker"}, "start": "true"}, "B": {"id": "B", "function": {"ref": "collect_aiq_data"}}, "C": {"id": "C", "function": {"ref": "collect_images"}}, "D": {"id": "D", "function": {"ref": "show_aiq"}}, "E": {"id": "E", "function": {"ref": "show_images"}}, "F": {"id": "F", "function": {"ref": "infer_traffic"}, "end": "true"}}, "functions": {"http_invoker": {"id": "", "platform": "openfaas", "config": {}, "endpoint": "http://gateway.openfaas.svc.cluster.local:8080/async-function/appender", "data": {"type": "intern", "uri": "."}}, "collect_aiq_data": {"id": "collect_aiq_data", "platform": "openfaas", "config": {}, "endpoint": "http://gateway.openfaas.svc.cluster.local:8080/async-function/appender", "data": {"type": "intern", "uri": "."}}, "collect_images": {"id": "collect_images", "platform": "openfaas", "config": {}, "endpoint": "http://gateway.openfaas.svc.cluster.local:8080/async-function/appender", "data": {"type": "intern", "uri": "."}}, "show_images": {"id": "show_images", "platform": "openfaas", "config": {}, "endpoint": "http://gateway.openfaas.svc.cluster.local:8080/async-function/appender", "data": {"type": "intern", "uri": "."}}, "show_aiq": {"id": "show_aiq", "platform": "openfaas", "config": {}, "endpoint": "http://gateway.openfaas.svc.cluster.local:8080/async-function/appender", "data": {"type": "intern", "uri": "."}}, "infer_traffic": {"id": "infer_traffic", "platform": "openfaas", "config": {}, "endpoint": "http://gateway.openfaas.svc.cluster.local:8080/async-function/appender", "data": {"type": "intern", "uri": "."}}}, "workflow": {"A": {"activation": "True", "inputFilter": "", "outputFilter": ""}, "B": {"activation": "A", "inputFilter": "", "outputFilter": ""}, "C": {"activation": "A", "inputFilter": "", "outputFilter": ""}, "D": {"activation": "B", "inputFilter": "", "outputFilter": ""}, "E": {"activation": "C", "inputFilter": "", "outputFilter": ""}, "F": {"activation": "B and C", "inputFilter": "", "outputFilter": ""}}}, "vars": {"A": "t", "B": "false", "C": "false", "D": "false", "E": "false", "F": "false"}, "A": "true", "B": "false", "C": "false", "D": "false", "E": "false", "F": "false", "exec": {"outputs": {"A": {"data": {}}}, "equations": {"B": "A", "C": "A", "D": "B", "E": "C", "F": "B and C"}, "solved_equations": {"A": "true"}, "triggered": []}}
locals().update(vars)

exec = {"outputs": {"A": {"data": {}}}, "equations": {"B": "A", "C": "A", "D": "B", "E": "C", "F": "B and C"}, "solved_equations": {"A": "True"}, "triggered": []}
data = [state for state, eq in exec["equations"].items()  if state not in exec["triggered"] and eval(eq)]
